// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//model for social media app

model User {
  id        String    @id @default(cuid())
  name      String
  clerkId  String     @unique
  email     String    @unique
  bio      String?
  image    String?
  location String?
  website  String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  posts     Post[]
  comments  Comment[]
  likes Like[]
  followers Follow[] @relation("Followers")
  following Follow[] @relation("Following")

  notifications Notification[] @relation("userNotifications")
  notificationsCreated Notification[] @relation("NotificationsCreator")
} 

model Post {
  id        String    @id @default(cuid())
  userId   String
  content   String
  image     String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  comments  Comment[]
  likes Like[]
  notifications Notification[] 
}

model Comment {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user      User      @relation(fields: [userId], references: [id] ,onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id],onDelete: Cascade)

  notifications Notification[]
  @@index([userId, postId]) //composite key
}

model Like {
  id        String    @id @default(cuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())

  user      User      @relation(fields: [userId], references: [id],onDelete: Cascade)
  post      Post      @relation(fields: [postId], references: [id],onDelete: Cascade)

  @@index([userId, postId]) //composite index for faster querying
  @@unique([userId, postId]) //makes it unique so same user cannot like twice
}

model Follow {
  followerId String
  followingId String
  createdAt DateTime @default(now())

  follower User @relation("Followers", fields: [followerId], references: [id],onDelete: Cascade)
  following User @relation("Following", fields: [followingId], references: [id],onDelete: Cascade)
  @@index([followerId, followingId])
  @@id([followerId, followingId]) //composite primary key

}

model Notification {
  id        String   @id @default(cuid())
  userId    String                  
  creatorId String                  
  type      NotificationType        
  read      Boolean  @default(false)
  postId    String?                 
  commentId String?                
  createdAt DateTime @default(now())
  
  // Relations
  user      User     @relation("userNotifications", fields: [userId], references: [id], onDelete: Cascade)
  creator   User     @relation("NotificationsCreator", fields: [creatorId], references: [id], onDelete: Cascade)
  post      Post?    @relation(fields: [postId], references: [id], onDelete: Cascade)
  comment   Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  // 

  @@index([userId, createdAt])
}

enum NotificationType {
  LIKE     
  COMMENT 
  FOLLOW   
}